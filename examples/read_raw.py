#!/usr/bin/env python3
"""
Read raw BGR/RGB/BGRA/RGBA files generated by Image to Raw Converter
"""
import numpy as np


def read_raw_with_metadata(filename):
    """
    Read raw file with metadata header
    
    Returns:
        tuple: (image_array, width, height, format_name)
    """
    with open(filename, 'rb') as f:
        # Read 12-byte header
        width = int.from_bytes(f.read(4), byteorder='little')
        height = int.from_bytes(f.read(4), byteorder='little')
        format_code = int.from_bytes(f.read(4), byteorder='little')
        
        # Format mapping
        formats = {
            1: ('BGRA', 4),
            2: ('RGBA', 4),
            3: ('BGR', 3),
            4: ('RGB', 3)
        }
        
        format_name, channels = formats.get(format_code, ('Unknown', 0))
        
        if format_name == 'Unknown':
            raise ValueError(f"Unknown format code: {format_code}")
        
        print(f"📐 Dimensions: {width}x{height}")
        print(f"🎨 Format: {format_name}")
        print(f"📊 Channels: {channels}")
        
        # Read pixel data
        expected_size = width * height * channels
        pixel_data = np.fromfile(f, dtype=np.uint8, count=expected_size)
        
        if len(pixel_data) != expected_size:
            raise ValueError(f"Expected {expected_size} bytes, got {len(pixel_data)}")
        
        # Reshape to image array
        image = pixel_data.reshape((height, width, channels))
        
        return image, width, height, format_name


def read_raw_without_metadata(filename, width, height, format='BGR'):
    """
    Read raw file without metadata header
    
    Args:
        filename: Path to raw file
        width: Image width
        height: Image height
        format: 'BGR', 'RGB', 'BGRA', or 'RGBA'
    
    Returns:
        numpy.ndarray: Image array
    """
    channels = 4 if 'A' in format else 3
    
    pixel_data = np.fromfile(filename, dtype=np.uint8)
    expected_size = width * height * channels
    
    if len(pixel_data) != expected_size:
        raise ValueError(
            f"File size mismatch! Expected {expected_size} bytes "
            f"for {width}x{height}x{channels}, got {len(pixel_data)}"
        )
    
    image = pixel_data.reshape((height, width, channels))
    
    print(f"📐 Dimensions: {width}x{height}")
    print(f"🎨 Format: {format}")
    print(f"📊 Channels: {channels}")
    
    return image


def save_as_png(image, output_filename, format='BGR'):
    """
    Save raw data as PNG using PIL
    Requires: pip install Pillow
    """
    from PIL import Image
    
    # Convert BGR to RGB if needed
    if format == 'BGR':
        image = image[:, :, ::-1]  # Reverse channel order
    elif format == 'BGRA':
        # Convert BGRA to RGBA
        image = image[:, :, [2, 1, 0, 3]]
    
    img = Image.fromarray(image)
    img.save(output_filename)
    print(f"💾 Saved as: {output_filename}")


def get_pixel_info(image, x, y):
    """Get pixel value at specific coordinates"""
    if y >= image.shape[0] or x >= image.shape[1]:
        return None
    return image[y, x]


def main():
    print("🖼️  Raw Image File Reader\n")
    
    # Example 1: Read file WITH metadata
    print("=" * 50)
    print("Example 1: Reading file WITH metadata")
    print("=" * 50)
    
    try:
        image, width, height, format_name = read_raw_with_metadata('test_bgr_meta.raw')
        print(f"✅ Successfully loaded image!")
        print(f"📏 Shape: {image.shape}")
        print(f"🎯 Data type: {image.dtype}")
        print(f"📈 Min value: {image.min()}, Max value: {image.max()}")
        
        # Get pixel at position (0, 0)
        pixel = get_pixel_info(image, 0, 0)
        if pixel is not None:
            print(f"🎨 Pixel at (0,0): {pixel}")
        
        # Optionally save as PNG
        # save_as_png(image, 'output.png', format_name)
        
    except FileNotFoundError:
        print("⚠️  File 'test_bgr_meta.raw' not found")
    except Exception as e:
        print(f"❌ Error: {e}")
    
    print()
    
    # Example 2: Read file WITHOUT metadata
    print("=" * 50)
    print("Example 2: Reading file WITHOUT metadata")
    print("=" * 50)
    
    try:
        # You must know the dimensions and format!
        width, height = 1920, 1080
        image = read_raw_without_metadata('test_bgr.raw', width, height, format='BGR')
        print(f"✅ Successfully loaded image!")
        print(f"📏 Shape: {image.shape}")
        
    except FileNotFoundError:
        print("⚠️  File 'test_bgr.raw' not found")
    except Exception as e:
        print(f"❌ Error: {e}")


if __name__ == '__main__':
    main()